@page "/products"

@inject HttpClient http
@using ExpenseManagement.Application.DTOs

@* Testando autenticação *@

<AuthorizeView>
    <Authorized>
        <h1>Test</h1>

        <p role="status" >Test Autorizado</p>

        <button class="btn btn-outline-primary" >Botão autorizado</button>
    </Authorized>
    <NotAuthorized>
        <p role="status" >Você não esta autorizado</p>
    </NotAuthorized>
</AuthorizeView>

@if (_produtos == null)
{
    <h4>Carregando...</h4>
}
else if (!_produtos.Any())
{
    <h4>Nenhum categoria encontrada</h4>
}
else
{

    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nome</th>
                <th>Descrição</th>
                <th>Valor</th>
                <th>Qtd Estoque</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var categoria in _produtos)
            {
                <tr>
                    <td>@categoria.Id</td>
                    <td>@categoria.Name</td>
                    <td>@categoria.Description</td>
                    <td>@categoria.Price</td>
                    <td>@categoria.Stock</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private IEnumerable<ProductDTO>? _produtos { get; set; }
    private bool _produtosCarregadas = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_produtosCarregadas)
        {
            await CarregarProdutos();
            _produtosCarregadas = true;
        }
    }

    private async Task CarregarProdutos()
    {
        _produtos = await http.GetFromJsonAsync<List<ProductDTO>>("api/product");
        StateHasChanged();
    }

}
